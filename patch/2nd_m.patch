Index: src/test/java/course/concurrency/m2_async/cf/ReportServiceTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1251
===================================================================
diff --git a/src/test/java/course/concurrency/m2_async/cf/ReportServiceTests.java b/src/test/java/course/concurrency/m2_async/cf/ReportServiceTests.java
new file mode 100644
--- /dev/null	(date 1681219091875)
+++ b/src/test/java/course/concurrency/m2_async/cf/ReportServiceTests.java	(date 1681219091875)
@@ -0,0 +1,44 @@
+package course.concurrency.m2_async.cf;
+
+import course.concurrency.m2_async.cf.report.ReportServiceCF;
+import course.concurrency.m2_async.cf.report.ReportServiceExecutors;
+import org.junit.jupiter.api.Test;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
+
+public class ReportServiceTests {
+
+    private ReportServiceExecutors reportService = new ReportServiceExecutors();
+//    private ReportServiceCF reportService = new ReportServiceCF();
+
+    @Test
+    public void testMultipleTasks() throws InterruptedException {
+        int poolSize = Runtime.getRuntime().availableProcessors()*3;
+        int iterations = 5;
+
+        CountDownLatch latch = new CountDownLatch(1);
+        ExecutorService executor = Executors.newFixedThreadPool(poolSize);
+
+        for (int i = 0; i < poolSize; i++) {
+            executor.submit(() -> {
+                try {
+                    latch.await();
+                } catch (InterruptedException ignored) {}
+                for (int it = 0; it < iterations; it++) {
+                    reportService.getReport();
+                }
+            });
+        }
+
+        long start = System.currentTimeMillis();
+        latch.countDown();
+        executor.shutdown();
+        executor.awaitTermination(5, TimeUnit.MINUTES);
+        long end = System.currentTimeMillis();
+
+        System.out.println("Execution time: " + (end - start));
+    }
+}
Index: src/main/java/course/concurrency/m2_async/executors/spring/SpringBootAsyncTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m2_async/executors/spring/SpringBootAsyncTest.java b/src/main/java/course/concurrency/m2_async/executors/spring/SpringBootAsyncTest.java
new file mode 100644
--- /dev/null	(date 1683488384348)
+++ b/src/main/java/course/concurrency/m2_async/executors/spring/SpringBootAsyncTest.java	(date 1683488384348)
@@ -0,0 +1,24 @@
+package course.concurrency.m2_async.executors.spring;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.context.event.ApplicationReadyEvent;
+import org.springframework.context.event.EventListener;
+
+@SpringBootApplication
+public class SpringBootAsyncTest {
+
+    @Autowired
+    private AsyncClassTest testClass;
+
+    // this method executes after application start
+    @EventListener(ApplicationReadyEvent.class)
+    public void actionAfterStartup() {
+        testClass.runAsyncTask();
+    }
+
+    public static void main(String[] args) {
+        SpringApplication.run(SpringBootAsyncTest.class, args);
+    }
+}
Index: src/main/java/course/concurrency/m2_async/executors/spring/AsyncClassTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m2_async/executors/spring/AsyncClassTest.java b/src/main/java/course/concurrency/m2_async/executors/spring/AsyncClassTest.java
new file mode 100644
--- /dev/null	(date 1683488281654)
+++ b/src/main/java/course/concurrency/m2_async/executors/spring/AsyncClassTest.java	(date 1683488281654)
@@ -0,0 +1,29 @@
+package course.concurrency.m2_async.executors.spring;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
+import org.springframework.context.ApplicationContext;
+import org.springframework.scheduling.annotation.Async;
+import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
+import org.springframework.stereotype.Component;
+
+@Component
+public class AsyncClassTest {
+
+    @Autowired
+    public ApplicationContext context;
+
+    @Autowired
+    @Qualifier("applicationTaskExecutor")
+    private ThreadPoolTaskExecutor executor;
+
+    @Async
+    public void runAsyncTask() {
+        System.out.println("runAsyncTask: " + Thread.currentThread().getName());
+        internalTask();
+    }
+
+    public void internalTask() {
+        System.out.println("internalTask: " + Thread.currentThread().getName());
+    }
+}
Index: src/main/java/course/concurrency/m2_async/cf/LoadGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m2_async/cf/LoadGenerator.java b/src/main/java/course/concurrency/m2_async/cf/LoadGenerator.java
new file mode 100644
--- /dev/null	(date 1681219091850)
+++ b/src/main/java/course/concurrency/m2_async/cf/LoadGenerator.java	(date 1681219091850)
@@ -0,0 +1,23 @@
+package course.concurrency.m2_async.cf;
+
+import java.util.stream.IntStream;
+
+public class LoadGenerator {
+
+    public static void work() {
+//        sleep();
+        compute();
+    }
+
+    private static void sleep() {
+        try {
+            Thread.sleep(1500);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private static int compute() {
+        return IntStream.range(0, 5_000_000).boxed().filter(i -> i % 2 == 0).reduce((a, b) -> b).get();
+    }
+}
\ No newline at end of file
Index: src/main/java/course/concurrency/m2_async/cf/report/ReportServiceExecutors.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m2_async/cf/report/ReportServiceExecutors.java b/src/main/java/course/concurrency/m2_async/cf/report/ReportServiceExecutors.java
new file mode 100644
--- /dev/null	(date 1681219091840)
+++ b/src/main/java/course/concurrency/m2_async/cf/report/ReportServiceExecutors.java	(date 1681219091840)
@@ -0,0 +1,51 @@
+package course.concurrency.m2_async.cf.report;
+
+import course.concurrency.m2_async.cf.LoadGenerator;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
+public class ReportServiceExecutors {
+
+    private ExecutorService executor = Executors.newCachedThreadPool();
+
+    private LoadGenerator loadGenerator = new LoadGenerator();
+
+    public Others.Report getReport() {
+        Future<Collection<Others.Item>> iFuture =
+                executor.submit(() -> getItems());
+        Future<Collection<Others.Customer>> customersFuture =
+                executor.submit(() -> getActiveCustomers());
+
+        try {
+            Collection<Others.Customer> customers = customersFuture.get();
+            Collection<Others.Item> items = iFuture.get();
+            return combineResults(items, customers);
+        } catch (ExecutionException | InterruptedException ex) {}
+
+        return new Others.Report();
+    }
+
+    private Others.Report combineResults(Collection<Others.Item> items, Collection<Others.Customer> customers) {
+        return new Others.Report();
+    }
+
+    private Collection<Others.Customer> getActiveCustomers() {
+        loadGenerator.work();
+        loadGenerator.work();
+        return List.of(new Others.Customer(), new Others.Customer());
+    }
+
+    private Collection<Others.Item> getItems() {
+        loadGenerator.work();
+        return List.of(new Others.Item(), new Others.Item());
+    }
+
+    public void shutdown() {
+        executor.shutdown();
+    }
+}
Index: src/main/java/course/concurrency/m2_async/cf/report/ReportServiceCF.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m2_async/cf/report/ReportServiceCF.java b/src/main/java/course/concurrency/m2_async/cf/report/ReportServiceCF.java
new file mode 100644
--- /dev/null	(date 1681219091831)
+++ b/src/main/java/course/concurrency/m2_async/cf/report/ReportServiceCF.java	(date 1681219091831)
@@ -0,0 +1,49 @@
+package course.concurrency.m2_async.cf.report;
+
+import course.concurrency.m2_async.cf.LoadGenerator;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.ForkJoinPool;
+
+public class ReportServiceCF {
+
+    private ExecutorService executor = ForkJoinPool.commonPool();
+
+    private LoadGenerator loadGenerator = new LoadGenerator();
+
+    public Others.Report getReport() {
+        CompletableFuture<Collection<Others.Item>> itemsCF =
+                CompletableFuture.supplyAsync(() -> getItems(), executor);
+
+        CompletableFuture<Collection<Others.Customer>> customersCF =
+                CompletableFuture.supplyAsync(() -> getActiveCustomers(), executor);
+
+        CompletableFuture<Others.Report> reportTask =
+                customersCF.thenCombine(itemsCF,
+                        (customers, orders) -> combineResults(orders, customers));
+
+        return reportTask.join();
+    }
+
+    private Others.Report combineResults(Collection<Others.Item> items, Collection<Others.Customer> customers) {
+        return new Others.Report();
+    }
+
+    private Collection<Others.Customer> getActiveCustomers() {
+        loadGenerator.work();
+        loadGenerator.work();
+        return List.of(new Others.Customer(), new Others.Customer());
+    }
+
+    private Collection<Others.Item> getItems() {
+        loadGenerator.work();
+        return List.of(new Others.Item(), new Others.Item());
+    }
+
+    public void shutdown() {
+        executor.shutdown();
+    }
+}
Index: src/main/java/course/concurrency/m2_async/cf/report/Others.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m2_async/cf/report/Others.java b/src/main/java/course/concurrency/m2_async/cf/report/Others.java
new file mode 100644
--- /dev/null	(date 1681219091823)
+++ b/src/main/java/course/concurrency/m2_async/cf/report/Others.java	(date 1681219091823)
@@ -0,0 +1,8 @@
+package course.concurrency.m2_async.cf.report;
+
+public class Others {
+
+    static class Item {}
+    static class Customer {}
+    public static class Report {}
+}
Index: src/main/java/course/concurrency/m2_async/cf/min_price/PriceRetriever.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m2_async/cf/min_price/PriceRetriever.java b/src/main/java/course/concurrency/m2_async/cf/min_price/PriceRetriever.java
new file mode 100644
--- /dev/null	(date 1681219091814)
+++ b/src/main/java/course/concurrency/m2_async/cf/min_price/PriceRetriever.java	(date 1681219091814)
@@ -0,0 +1,17 @@
+package course.concurrency.m2_async.cf.min_price;
+
+import java.util.concurrent.ThreadLocalRandom;
+
+public class PriceRetriever {
+
+    public double getPrice(long itemId, long shopId) {
+        int delay = ThreadLocalRandom.current().nextInt(10);
+        sleep(delay);
+        return ThreadLocalRandom.current().nextDouble(1000);
+    }
+
+    private void sleep(int delay) {
+        try { Thread.sleep(delay * 1000);
+        } catch (InterruptedException e) {}
+    }
+}
Index: src/main/java/course/concurrency/m2_async/cf/min_price/PriceAggregator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/course/concurrency/m2_async/cf/min_price/PriceAggregator.java b/src/main/java/course/concurrency/m2_async/cf/min_price/PriceAggregator.java
new file mode 100644
--- /dev/null	(date 1681219091803)
+++ b/src/main/java/course/concurrency/m2_async/cf/min_price/PriceAggregator.java	(date 1681219091803)
@@ -0,0 +1,24 @@
+package course.concurrency.m2_async.cf.min_price;
+
+import java.util.Collection;
+import java.util.Set;
+
+public class PriceAggregator {
+
+    private PriceRetriever priceRetriever = new PriceRetriever();
+
+    public void setPriceRetriever(PriceRetriever priceRetriever) {
+        this.priceRetriever = priceRetriever;
+    }
+
+    private Collection<Long> shopIds = Set.of(10l, 45l, 66l, 345l, 234l, 333l, 67l, 123l, 768l);
+
+    public void setShops(Collection<Long> shopIds) {
+        this.shopIds = shopIds;
+    }
+
+    public double getMinPrice(long itemId) {
+        // place for your code
+        return 0;
+    }
+}
Index: src/test/java/course/concurrency/m2_async/min_price/PriceAggregatorTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1251
===================================================================
diff --git a/src/test/java/course/concurrency/m2_async/min_price/PriceAggregatorTests.java b/src/test/java/course/concurrency/m2_async/min_price/PriceAggregatorTests.java
new file mode 100644
--- /dev/null	(date 1683487815037)
+++ b/src/test/java/course/concurrency/m2_async/min_price/PriceAggregatorTests.java	(date 1683487815037)
@@ -0,0 +1,224 @@
+package course.concurrency.m2_async.min_price;
+
+import course.concurrency.m2_async.cf.min_price.PriceAggregator;
+import course.concurrency.m2_async.cf.min_price.PriceRetriever;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Test;
+
+import java.util.List;
+import java.util.Objects;
+import java.util.Set;
+import java.util.concurrent.ConcurrentSkipListSet;
+import java.util.concurrent.ThreadLocalRandom;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.IntStream;
+import java.util.stream.LongStream;
+
+import static java.util.stream.Collectors.toList;
+import static java.util.stream.Collectors.toSet;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class PriceAggregatorTests {
+
+    PriceAggregator priceAggregator;
+
+    long randomItemId;
+
+    private int SLA = 3000;
+
+    @BeforeEach
+    public void setup() {
+        priceAggregator = new PriceAggregator();
+        randomItemId = ThreadLocalRandom.current().nextLong();
+    }
+
+    @Test
+    @DisplayName("Every shop responds")
+    public void shouldReturnMin() {
+        int shopCount = 50;
+        PriceRetriever priceRetriever = mock(PriceRetriever.class);
+        List<Double> prices = IntStream.range(0, shopCount-1).boxed()
+                .map(i -> ThreadLocalRandom.current().nextDouble())
+                .collect(toList());
+        when(priceRetriever.getPrice(anyLong(), anyLong())).thenReturn(ThreadLocalRandom.current().nextDouble()*100,
+                prices.toArray(new Double[]{}));
+        priceAggregator.setPriceRetriever(priceRetriever);
+        Set<Long> shops = LongStream.range(0, shopCount).boxed().collect(toSet());
+        priceAggregator.setShops(shops);
+        double expectedMin = prices.stream().min(Double::compareTo).get();
+
+        long start = System.currentTimeMillis();
+        double min = priceAggregator.getMinPrice(randomItemId);
+        long end = System.currentTimeMillis();
+
+        assertEquals(expectedMin, min, "Minimal price is evaluated incorrectly");
+        assertTrue((end - start) < SLA, "Method evaluated too long");
+    }
+
+    @Test
+    @DisplayName("No one responds")
+    public void shouldReturnDefault() {
+        PriceRetriever priceRetriever = mock(PriceRetriever.class);
+        when(priceRetriever.getPrice(anyLong(), anyLong())).thenAnswer(inv -> {
+            Thread.sleep(3000);
+            return 12d;
+        });
+        priceAggregator.setPriceRetriever(priceRetriever);
+        double expectedMin = Double.NaN;
+
+        long start = System.currentTimeMillis();
+        double min = priceAggregator.getMinPrice(15L);
+        long end = System.currentTimeMillis();
+
+        assertEquals(expectedMin, min, "Minimal price is evaluated incorrectly");
+        assertTrue((end - start) < SLA, "Method evaluated too long");
+    }
+
+    @Test
+    @DisplayName("Half of shops respond too long")
+    public void shouldTolerateLongResponses(){
+        int shopCount = 50;
+        int half = shopCount/2;
+        PriceRetriever priceRetriever = mock(PriceRetriever.class);
+        List<Double> prices = IntStream.range(0, half).boxed()
+                .map(i -> ThreadLocalRandom.current().nextDouble()*100).collect(toList());
+
+        AtomicInteger totalRequestCount = new AtomicInteger();
+        AtomicInteger succeedRequestCount = new AtomicInteger();
+
+        when(priceRetriever.getPrice(anyLong(), anyLong())).thenAnswer(inv -> {
+            if (totalRequestCount.getAndIncrement() < half) {
+                Thread.sleep(SLA * 2);
+                return null;
+            } else {
+                return prices.get(succeedRequestCount.getAndIncrement());
+            }
+        });
+
+        priceAggregator.setPriceRetriever(priceRetriever);
+        Set<Long> shops = LongStream.range(0, shopCount).boxed().collect(toSet());
+        priceAggregator.setShops(shops);
+
+        long start = System.currentTimeMillis();
+        double min = priceAggregator.getMinPrice(randomItemId);
+        long end = System.currentTimeMillis();
+
+        double expectedMin = prices.stream().min(Double::compareTo).orElse(Double.NaN);
+        assertEquals(expectedMin, min, "Minimal price is evaluated incorrectly");
+        assertTrue((end - start) < SLA, "Method evaluated too long");
+    }
+
+    @Test
+    @DisplayName("Not everyone responds")
+    public void shouldReturnMinWithIncomplete() {
+        int shopCount = 50;
+        PriceRetriever priceRetriever = mock(PriceRetriever.class);
+        AtomicBoolean isComplete = new AtomicBoolean(false);
+        List<Double> prices = IntStream.range(0, shopCount).boxed()
+                .map(i -> {
+                    Double price = isComplete.get() ? ThreadLocalRandom.current().nextDouble()*100 : null;
+                    isComplete.set(!isComplete.get());
+                    return price;
+                }).collect(toList());
+
+        AtomicInteger index = new AtomicInteger();
+        ConcurrentSkipListSet<Double> usedPrices = new ConcurrentSkipListSet<>();
+        when(priceRetriever.getPrice(anyLong(), anyLong())).thenAnswer(inv -> {
+            Double result = prices.get(index.getAndIncrement());
+            if (result != null) {
+                usedPrices.add(result);
+                return result;
+            } else {
+                Thread.sleep(SLA);
+                return null;
+            }
+        });
+
+        priceAggregator.setPriceRetriever(priceRetriever);
+        Set<Long> shops = LongStream.range(0, shopCount).boxed().collect(toSet());
+        priceAggregator.setShops(shops);
+
+
+        long start = System.currentTimeMillis();
+        double min = priceAggregator.getMinPrice(randomItemId);
+        long end = System.currentTimeMillis();
+
+        double expectedMin = usedPrices.stream().min(Double::compareTo).orElse(Double.NaN);
+        assertEquals(expectedMin, min, "Minimal price is evaluated incorrectly");
+        assertTrue((end - start) < SLA, "Method evaluated too long");
+    }
+
+    @Test
+    @DisplayName("Some shops respond with exception")
+    public void shouldReturnMinWithException() {
+        int shopCount = 50;
+        PriceRetriever priceRetriever = mock(PriceRetriever.class);
+        List<Double> prices = IntStream.range(0, shopCount).boxed()
+                .map(i -> {
+                    boolean isComplete = ThreadLocalRandom.current().nextBoolean();
+                    if (isComplete) {
+                        double price = ThreadLocalRandom.current().nextDouble()*100;
+                        return price;
+                    } else return null;
+                }).collect(toList());
+
+        AtomicInteger index = new AtomicInteger();
+        when(priceRetriever.getPrice(anyLong(), anyLong())).thenAnswer(inv -> {
+            Double result = prices.get(index.getAndIncrement());
+            if (result != null) {
+                return result;
+            } else {
+                throw new RuntimeException();
+            }
+        });
+
+        priceAggregator.setPriceRetriever(priceRetriever);
+        Set<Long> shops = LongStream.range(0, shopCount).boxed().collect(toSet());
+        priceAggregator.setShops(shops);
+        double expectedMin = prices.stream().filter(Objects::nonNull).min(Double::compareTo).get();
+
+        long start = System.currentTimeMillis();
+        double min = priceAggregator.getMinPrice(randomItemId);
+        long end = System.currentTimeMillis();
+
+        assertEquals(expectedMin, min, "Minimal price is evaluated incorrectly");
+        assertTrue((end - start) < SLA, "Method evaluated too long");
+    }
+
+    @Test
+    @DisplayName("Min price from last shop")
+    public void shouldReturnMinFromLast() {
+        int shopCount = 50;
+        double expectedMinPrice = 10d;
+
+        List<Long> shopIds = LongStream.range(0, shopCount-1).boxed().collect(toList());
+        priceAggregator.setShops(shopIds);
+
+        List<Double> prices = shopIds.stream().map(id -> 300+Double.valueOf(id)).collect(toList());
+        prices.add(shopCount-1, expectedMinPrice);
+
+        PriceRetriever priceRetriever = mock(PriceRetriever.class);
+        AtomicInteger invocationCount = new AtomicInteger();
+        when(priceRetriever.getPrice(anyLong(), anyLong())).thenAnswer(inv -> {
+            int iteration = invocationCount.getAndIncrement();
+            Thread.sleep(2500);
+            return prices.get(iteration);
+        });
+        priceAggregator.setPriceRetriever(priceRetriever);
+        Set<Long> shops = LongStream.range(0, shopCount).boxed().collect(toSet());
+        priceAggregator.setShops(shops);
+
+        long start = System.currentTimeMillis();
+        double min = priceAggregator.getMinPrice(randomItemId);
+        long end = System.currentTimeMillis();
+
+        assertEquals(expectedMinPrice, min, "Minimal price is evaluated incorrectly");
+        assertTrue((end - start) < SLA, "Method evaluated too long");
+    }
+}